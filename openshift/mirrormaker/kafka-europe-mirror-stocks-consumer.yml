---
kind: ConfigMap
apiVersion: v1
metadata:
  name: europe-mirror-stocks-consumer
data:
  application.properties: >-
    mp.messaging.incoming.stocks.bootstrap.servers=europe-cluster-kafka-bootstrap.kafka-mirrormaker-europe-${GUID}.svc:9093

    mp.messaging.incoming.stocks.topic=us.stocks

    mp.messaging.incoming.stocks.group.id=europe-mirror-stocks-consumer

    mp.messaging.incoming.stocks.security.protocol=SSL

    mp.messaging.incoming.stocks.ssl.truststore.type=PKCS12

    mp.messaging.incoming.stocks.ssl.truststore.location=/certs/kafka-cluster/kafka-cluster-ca.p12

    mp.messaging.incoming.stocks.ssl.truststore.password=${EUROPE_CA_CERT_PASSWD}

    mp.messaging.incoming.stocks.ssl.keystore.type=PKCS12

    mp.messaging.incoming.stocks.ssl.keystore.location=/certs/kafka-user/kafka-user.p12

    mp.messaging.incoming.stocks.ssl.keystore.password=${EUROPE_STOCKS_CERT_PASSWD}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: europe-mirror-stocks-consumer
  name: europe-mirror-stocks-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: europe-mirror-stocks-consumer
      app: europe-mirror-stocks-consumer
  template:
    metadata:
      labels:
        deployment: europe-mirror-stocks-consumer
        app: europe-mirror-stocks-consumer
    spec:
      containers:
        - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: quay.io/btison/quarkus-kafka-stocks-consumer:latest
          imagePullPolicy: Always
          name: kafka-mirror-stocks-consumer
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 500m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /deployments/config
              name: config
            - name: kafka-certs
              mountPath: /certs/kafka-cluster
            - name: kafka-user-certs
              mountPath: /certs/kafka-user
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            name: europe-mirror-stocks-consumer
          name: config
        - name: kafka-certs
          secret:
            secretName: kafka-certs
            defaultMode: 420
        - name: kafka-user-certs
          secret:
            secretName: europe-stocks-certs
            defaultMode: 420